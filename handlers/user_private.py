from datetime import datetime
import re
import time

from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile

from constants import constants
from filters.chat_types import ChatTypeFilter
from keyboard.inline import git, more
from keyboard.reply import start_keyboard
from utils.loger import logger
from utils.make_shot import make_shot

user_private_router = Router()
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    """Start command –¥–ª—è –±–æ—Ç–∞."""
    await message.answer(
        f'<b>{message.from_user.first_name}</b> '
        f'{constants.GREETING_ANSWER}',
        reply_markup=start_keyboard
    )
    await message.answer_animation(constants.HASBIK_HELLO)
    logger.info(f'{message.from_user.username} - '
                f'–Ω–∞—á–∞–ª —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º.')


@user_private_router.message(F.text.lower() == '–ø—Ä–∏–≤–µ—Ç')
@user_private_router.message(Command('hello'))
async def hello_cmd(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É /hello –∏ —Å–æ–æ–±—â–µ–Ω–∏—è '–ø—Ä–∏–≤–µ—Ç'"""
    await message.reply(f'<b>{message.from_user.first_name}</b> '
                        f'{constants.GREETING_ANSWER}')
    await message.answer_animation(constants.HASBIK_HELLO)
    logger.info(f'{message.from_user.username} - '
                f'–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É hello.')


@user_private_router.message(F.text.lower() == '–ø–æ–∫–∞')
@user_private_router.message(Command('bye'))
async def bye_cmd(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É /bye –∏ —Å–æ–æ–±—â–µ–Ω–∏—è '–ø–æ–∫–∞'"""
    await message.reply(
        f'{constants.BYE_ANSWER} '
        f'<b>{message.from_user.first_name}</b>!'
    )
    await message.answer_animation(constants.BYE_STICKER)
    logger.info(f'{message.from_user.username} - '
                f'–∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É bye.')


@user_private_router.message(F.text.lower() == '–ø–æ–º–æ—â—å')
@user_private_router.message(Command('help'))
async def help_cmd(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É /help –∏ —Å–æ–æ–±—â–µ–Ω–∏—è '–ø–æ–º–æ—â—å'"""
    await message.answer(
        f'<b>{message.from_user.first_name}</b> '
        f'{constants.COMMAND_LIST}',
        reply_markup=git
    )
    logger.info(f'{message.from_user.username} -'
                f' –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É help.')


# –ö–æ–¥ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—à–∏–Ω—ã FSM
class MakeShot(StatesGroup):
    url = State()
    process = State()
    screenshot_path = State()
    info = State()


@user_private_router.message(
    StateFilter(None),
    F.text.lower() == '—Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç'
)
@user_private_router.message(Command('make_shot'))
async def shot_cmd(message: types.Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã make_shot"""
    await message.answer(
        f'<b>{message.from_user.first_name}</b> ' + constants.URL_ANSWER,
    )
    await state.set_state(MakeShot.url)
    logger.info(f'{message.from_user.username}'
                f'  - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –∫–æ–º–∞–Ω–¥—É —Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç.')


@user_private_router.message(MakeShot.url, F.text)
async def process_cmd(message: types.Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    date = str(datetime.now())
    user_id = int(message.from_user.id)
    url = message.text
    # –°–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ä—Ç–æ–≤—É—é –º–µ—Ç–∫—É –≤—Ä–µ–º–µ–Ω–∏
    start_time = time.time()
    # –°–æ–∑–¥–∞–µ–º –º–∞—Å–∫—É –Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫—É URL
    url_pattern = re.compile(r'^https?://(?:[\w-]+\.?)+[\w]+(?:/\S*)?')
    if not url_pattern.match(url):
        await message.answer(
            "URL –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É."
            " –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL."
        )
        logger.error(
            f'{message.from_user.username}'
            f' - –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–ª –Ω–µ–∫–∫–æ—Ä–µ—Ç–Ω—ã–π URL: {message.text}'
        )
        return
    await state.update_data(url=message.text)
    process_message = await message.answer(
        '–ü–æ–ª—É—á–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...\n'
        '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–∞ —ç—Ç–æ –≤—Ä–µ–º—è –¥—Ä—É–≥–∏–µ –∫–æ–º–º–∞–Ω–¥—ã –Ω–µ —Ä–∞–±–æ—Ç–∞—é—Ç üò™',
    )
    logger.info('–ó–∞–ø—É—â–µ–Ω –ø—Ä–æ—Ü–µ—Å—Å –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.')
    process_sticker = await message.answer_animation(
        constants.PROCESS_STICKER
    )
    await state.set_state(MakeShot.process)
    result = await make_shot(date, user_id, url)
    if result:
        logger.info('–°–∫—Ä–∏–Ω—à–æ—Ç –ø–æ–ª—É—á–µ–Ω. –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–¥–æ–ª–∂–∞–µ—Ç —Ä–∞–±–æ—Ç—É.')
        if len(result) == 3:
            logger.info('–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ –≤—Å–µ –∞—Ä–≥—É–µ–Ω—Ç—ã,'
                        ' –≤ —Ç–æ–º —á–∏—Å–ª–µ –∏ WHOIS.')
            screenshot_path, title, info = result
            await state.update_data(screenshot_path=screenshot_path)
            await state.update_data(info=info)
            await state.set_state(MakeShot.screenshot_path)
            await send_screenshot(
                message, state, start_time,
                title, process_message,
                process_sticker, info
            )
        elif len(result) == 2:
            logger.info('–§—É–Ω–∫—Ü–∏—è –≤–µ—Ä–Ω—É–ª–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç, –±–µ–∑ WHOIS.')
            screenshot_path, title = result
            await state.update_data(screenshot_path=screenshot_path)
            await state.set_state(MakeShot.screenshot_path)
            await send_screenshot(
                message, state, start_time,
                title, process_message,
                process_sticker
            )
        else:
            logger.error(
                '–§—É–Ω–∫—Ü–∏—è make_shot –≤–µ—Ä–Ω—É–ª–∞'
                ' –Ω–µ–æ–∂–∏–¥–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤'
            )
            await message.answer(constants.EXCEPTION_ANSWER)

    else:
        logger.error('–§—É–Ω–∫—Ü–∏—è –Ω–µ –≤–µ—Ä–Ω—É–ª–∞ —Å–∫—Ä–∏–Ω—à–æ—Ç.')
        await message.answer(
            "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞,"
            " –±–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –¥–æ—Å—Ç—É–ø –∫ URL."
        )
        await state.clear()  # –û—Ç–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ


@user_private_router.message(MakeShot.screenshot_path)
async def send_screenshot(
        message: types.Message,
        state: FSMContext,
        start_time: float,
        title: str,
        process_message: types.Message,
        process_animation: types.Message,
        info: dict = None
):
    """–•—ç–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    screenshot_path = data.get('screenshot_path')
    # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    url = data.get('url')
    # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è —Ñ—É–Ω–∫—Ü–∏–∏
    finish_time = round((time.time() - start_time), 1)
    new_message_text = (
        f'‚úî –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç:\n'
        f'üï∏ –°—Ç—Ä–∞–Ω–∏—Ü–∞: <b>{title}</b>\n'
        f'üîó URL: {url}\n'
        f'‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: <b>{finish_time} —Å–µ–∫—É–Ω–¥(—ã)</b>\n'
    )
    if info:
        logger.info('WHOIS –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.')
        new_message_text += ("–í–æ—Ç ‚Äú–ü–æ–¥—Ä–æ–±–Ω–µ–µ‚Äù,"
                             " –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç WHOIS —Å–∞–π—Ç–∞")
        new_reply_markup = more
    else:
        logger.warning('WHOIS –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.')
        new_message_text += ("–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –Ω–µ —É–¥–∞–ª–æ—Å—å"
                             " –ø–æ–ª—É—á–∏—Ç—å WHOIS —Å–∞–π—Ç–∞")
        new_reply_markup = None
        # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
        await state.clear()
    await message.answer_photo(
        photo=FSInputFile(
            screenshot_path, filename=screenshot_path
        ), caption=new_message_text,
        reply_markup=new_reply_markup
    )
    logger.info('–°–∫—Ä–∏–Ω—à–æ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç.')
    # –≠—Ç–æ —Å–∫–æ—Ä–µ–µ –∫–æ—Å—Ç—ã–ª—å, –Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —É–¥–∞–ª–æ—Å—å
    # –ü–æ—ç—Ç–æ–º—É —É–¥–∞–ª—è—é
    await process_message.delete()
    await process_animation.delete()
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await message.answer_animation(constants.DONE_STICKER)
    logger.info(
        '–§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–∏–ª–∞ —Ä–∞–±–æ—Ç—É.'
    )


@user_private_router.callback_query(
    F.data.in_(['–ø–æ–¥—Ä–æ–±–Ω–µ–µ', 'more'])
)
async def more_info_callback(
        query: types.CallbackQuery,
        state: FSMContext
):
    """–§—É–Ω—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ callback '–ü–æ–¥—Ä–æ–±–Ω–µ–µ', –ø—Ä–∏ –Ω–∞–ª–∏—á–∏–∏ WHOIS"""
    await query.answer()
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    data = await state.get_data()
    info = data.get('info')
    if info:
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ - —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞
        logger.info('–ù–∞–∂–∞—Ç–∞ –∫–Ω–æ–ø–∫–∞ "–ü–æ–¥—Ä–æ–±–Ω–µ–µ" –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É.')
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ —á–∞—Ç
        await query.message.answer(
            f'–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è WHOIS:\n{info}'
        )
    else:
        await query.message.answer(
            '–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é WHOIS –¥–æ–±—ã—Ç—å –Ω–µ —É–¥–∞–ª–æ—Å—å'
        )
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –º–∞—à–∏–Ω—ã
    await state.clear()
    logger.info('–°–æ—Å—Ç–æ—è–Ω–∏–µ FSM –º–∞—à–∏–Ω—ã —Å–±—Ä–æ—à–µ–Ω–æ.')
    # –£–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–Ω–æ–ø–∫–æ–π "–ü–æ–¥—Ä–æ–±–Ω–µ–µ"
    await query.message.edit_reply_markup(reply_markup=None)


@user_private_router.message()
async def stub(message: types.Message):
    """–û—Ç–≤–µ—Ç - –∑–∞–≥–ª—É—à–∫–∞ –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."""
    if message.text:
        logger.info(
            f'{message.from_user.username}'
            f' - –≤–≤–µ–ª –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∫–æ–º–∞–Ω–¥—É.'
        )
        text = message.text
        if text.lower() in constants.GREETINGS_WORDS:
            await hello_cmd(message)
        elif text.lower() in constants.FAREWELL_WORDS:
            await bye_cmd(message)
        else:
            await message.answer(
                f'{constants.UNKNOWN_ANSWER}'
                f' <b>{text}</b>\n '
                f'{constants.COMMAND_LIST}'
            )
            await message.answer_animation(constants.UNKNOWN_STICKER)
    else:
        logger.warning(
            f'{message.from_user.username} - '
            f'–æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.'
        )
        await message.answer(constants.NON_TYPE_ANSWER)
        await message.answer_animation(constants.NON_TYPE_STICKER)
