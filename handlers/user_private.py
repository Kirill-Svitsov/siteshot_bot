import time
from datetime import datetime
import re

from aiogram import types, Router, F
from aiogram.filters import CommandStart, Command, StateFilter
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import StatesGroup, State
from aiogram.types import FSInputFile

from constants.constants import *
from filters.chat_types import ChatTypeFilter
from keyboard.reply import start_keyboard
from handlers.make_shot import make_shot

user_private_router = Router()
# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏—é –Ω–∞ —Ä–æ—É—Ç–µ—Ä –¥–ª—è —Ö—ç–Ω–¥–ª–µ—Ä–æ–≤ –ø—Ä–∏–≤–∞—Ç–Ω—ã—Ö —á–∞—Ç–æ–≤
user_private_router.message.filter(ChatTypeFilter(["private"]))


@user_private_router.message(CommandStart())
async def start_cmd(message: types.Message):
    """Start command –¥–ª—è –±–æ—Ç–∞."""
    await message.answer(
        f'<b>{message.from_user.first_name}</b>' + GREETING_ANSWER,
        reply_markup=start_keyboard
    )
    await message.answer_animation(HASBIK_HELLO)


@user_private_router.message(F.text.lower() == '–ø—Ä–∏–≤–µ—Ç')
@user_private_router.message(Command('hello'))
async def hello_cmd(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É URL –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    await message.reply(f'<b>{message.from_user.first_name}</b>' + GREETING_ANSWER)
    await message.answer_animation(HASBIK_HELLO)


@user_private_router.message(F.text.lower() == '–ø–æ–∫–∞')
@user_private_router.message(Command('bye'))
async def bye_cmd(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É URL –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    await message.reply(BYE_ANSWER + f'<b>{message.from_user.first_name}</b>!')
    await message.answer_animation(BYE_STICKER)


@user_private_router.message(F.text.lower() == '–ø–æ–º–æ—â—å')
@user_private_router.message(Command('help'))
async def help_cmd(message: types.Message):
    """–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –æ–±—Ä–∞–±–æ—Ç–∫—É URL –∏ –≤–æ–∑–≤—Ä–∞—â–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    await message.answer(f'<b>{message.from_user.first_name}</b> ' + COMMAND_LIST)


# –ö–æ–¥ –¥–ª—è —Å–æ—Å—Ç–æ—è–Ω–∏–π –º–∞—à–∏–Ω—ã FSM
class MakeShot(StatesGroup):
    url = State()
    process = State()
    screenshot_path = State()


# –•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã make_shot
@user_private_router.message(StateFilter(None), F.text.lower() == '—Å–¥–µ–ª–∞—Ç—å —Å–∫—Ä–∏–Ω—à–æ—Ç')
@user_private_router.message(Command('make_shot'))
async def shot_cmd(message: types.Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –¥–ª—è –∑–∞–ø—É—Å–∫–∞ –∫–æ–º–∞–Ω–¥—ã make_shot"""
    await message.answer(
        f'<b>{message.from_user.first_name}</b> ' + URL_ANSWER,
        reply_markup=types.ReplyKeyboardRemove()
    )
    await state.set_state(MakeShot.url)


# –•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –æ—Ç–º–µ–Ω—É –∫–æ–º–∞–Ω–¥—ã make_shot
@user_private_router.message(F.text.lower() == '–æ—Ç–º–µ–Ω–∞')
@user_private_router.message(Command('/cancel'))
async def cancel_cmd(message: types.Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –Ω–∞ –æ—Ç–º–µ–Ω—É –∫–æ–º–∞–Ω–¥—ã make_shot"""
    await message.answer(
        f'–î–µ–π—Å—Ç–≤–∏—è –æ—Ç–º–µ–Ω–µ–Ω—ã',
        reply_markup=start_keyboard
    )
    await state.finish()  # –û—Ç–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∫–æ–º–∞–Ω–¥—ã


# –•—ç–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞
@user_private_router.message(MakeShot.url, F.text)
async def process_cmd(message: types.Message, state: FSMContext):
    """–•—ç–Ω–¥–ª–µ—Ä –ø–æ–ª—É—á–µ–Ω–∏—è —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    date = str(datetime.now())
    user_id = int(message.from_user.id)
    url = message.text
    start_time = time.time()
    url_pattern = re.compile(r'^https?://(?:\w+\.)+\w+/')
    if not url_pattern.match(url):
        await message.answer("URL –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç —à–∞–±–ª–æ–Ω—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL.")
        return
    await state.update_data(url=message.text)
    process_message = await message.answer(
        '–ü–æ–ª—É—á–∞—é —Å–∫—Ä–∏–Ω—à–æ—Ç...',
    )
    process_sticker = await message.answer_animation(PROCESS_STICKER)
    await state.set_state(MakeShot.process)
    result = await make_shot(date, user_id, url)
    if result:
        screenshot_path, title = result
        await state.update_data(screenshot_path=screenshot_path)
        await state.set_state(MakeShot.screenshot_path)
        # –°—Ä–∞–∑—É –ø–æ—Å–ª–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è MakeShot.screenshot_path –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–∫—Ä–∏–Ω—à–æ—Ç
        await send_screenshot(message, state, start_time, title, process_message, process_sticker)
    else:
        await message.answer("–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞.")
        await state.clear()  # –û—Ç–º–µ–Ω—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏ –æ—à–∏–±–∫–µ


@user_private_router.message(MakeShot.screenshot_path)
async def send_screenshot(
        message: types.Message,
        state: FSMContext,
        start_time: float,
        title: str,
        process_message: types.Message,
        process_animation: types.Message
):
    """–•—ç–Ω–¥–ª–µ—Ä –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞"""
    data = await state.get_data()  # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    screenshot_path = data.get('screenshot_path')  # –ü–æ–ª—É—á–∞–µ–º –ø—É—Ç—å –∫ —Å–∫—Ä–∏–Ω—à–æ—Ç—É –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    url = data.get('url')  # –ü–æ–ª—É—á–∞–µ–º URL –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
    finish_time = round((time.time() - start_time), 1)
    new_message_text = (
        f'‚úî –°–∫—Ä–∏–Ω—à–æ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –≤ —á–∞—Ç:\n'
        f'üï∏ –°—Ç—Ä–∞–Ω–∏—Ü–∞: <b>{title}</b>\n'
        f'üîó URL: {url}\n'  # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –∏–∑ –¥–∞–Ω–Ω—ã—Ö —Å–æ—Å—Ç–æ—è–Ω–∏—è
        f'‚è± –í—Ä–µ–º—è –æ–±—Ä–∞–±–æ—Ç–∫–∏: <b>{finish_time} —Å–µ–∫—É–Ω–¥(—ã)</b>\n'
        f'–í–æ—Ç ‚Äú–ü–æ–¥—Ä–æ–±–Ω–µ–µ‚Äù, –∫–æ—Ç–æ—Ä–∞—è –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç WHOIS —Å–∞–π—Ç–∞'
    )
    await message.answer_photo(
        photo=FSInputFile(
            screenshot_path, filename=screenshot_path
        ), caption=new_message_text,
        reply_markup=start_keyboard
    )
    # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–æ—Ü–µ—Å—Å–µ –∏ –∞–Ω–∏–º–∞—Ü–∏—é
    await process_message.delete()
    await process_animation.delete()

    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∏–∫–µ—Ä –æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏
    await message.answer_animation(DONE_STICKER)
    await state.clear()  # –ó–∞–≤–µ—Ä—à–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ—Å–ª–µ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–∫—Ä–∏–Ω—à–æ—Ç–∞



@user_private_router.message()
async def stub(message: types.Message):
    """–û—Ç–≤–µ—Ç - –∑–∞–≥–ª—É—à–∫–∞ –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã."""
    user = message.from_user.first_name
    if message.text:
        text = message.text
        if text.lower() in GREETINGS_WORDS:
            await message.reply(f'<b>{user}</b>' + GREETING_ANSWER)
            await message.answer_animation(HASBIK_HELLO)
        elif text.lower() in FAREWELL_WORDS:
            await message.reply(BYE_ANSWER + f'<b>{user}</b>!')
            await message.answer_animation(BYE_STICKER)
        else:
            await message.answer(
                UNKNOWN_ANSWER + f'<b>{text}</b>\n' + COMMAND_LIST
            )
            await message.answer_animation(UNKNOWN_STICKER)
    else:
        await message.answer(NON_TYPE_ANSWER)
        await message.answer_animation(NON_TYPE_STICKER)
